cmake_policy(PUSH)
cmake_minimum_required(VERSION 3.27)

  
# For finding self-installed Find*.cmake packages.
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}")
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${LLVM_DIR})

set(LLVM_CXX_FLAGS_PREEXISTING "${CMAKE_CXX_FLAGS}")
set(LLVM_C_FLAGS_PREEXISTING "${CMAKE_C_FLAGS}")
set(LLVM_ASM_FLAGS_PREEXISTING "${CMAKE_ASM_FLAGS}")
set(LLVM_EXE_LINKER_FLAGS_PREEXISTING "${CMAKE_EXE_LINKER_FLAGS}")
set(LLVM_MODULE_LINKER_FLAGS_PREEXISTING "${CMAKE_MODULE_LINKER_FLAGS}")
set(LLVM_SHARED_LINKER_FLAGS_PREEXISTING "${CMAKE_SHARED_LINKER_FLAGS}")

get_directory_property(LLVM_COMPILE_DEFS_PREEXISTING COMPILE_DEFINITIONS)
get_directory_property(LLVM_COMPILE_OPTS_PREEXISTING COMPILE_OPTIONS)
set_directory_properties(PROPERTIES COMPILE_DEFINITIONS "" COMPILE_OPTIONS "")
find_package(LLVM ${LLVM_VERSION} CONFIG)

include(AddLLVM)
include(HandleLLVMOptions)

get_directory_property(LLVM_COMPILE_DEFS COMPILE_DEFINITIONS)
set_directory_properties(PROPERTIES
  COMPILE_DEFINITIONS
  "${LLVM_COMPILE_DEFS_PREEXISTING}")
get_directory_property(LLVM_COMPILE_OPTS COMPILE_OPTIONS)
set_directory_properties(PROPERTIES
  COMPILE_OPTIONS
  "${LLVM_COMPILE_OPTS_PREEXISTING}")

set(LLVM_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
set(LLVM_C_FLAGS "${CMAKE_C_FLAGS}")
set(LLVM_ASM_FLAGS "${CMAKE_ASM_FLAGS}")
set(LLVM_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS}")
set(LLVM_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS}")
set(LLVM_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS}")

message("LLVM_CXX_FLAGS=${LLVM_CXX_FLAGS}")
message("LLVM_C_FLAGS=${LLVM_C_FLAGS}")
message("LLVM_ASM_FLAGS=${LLVM_ASM_FLAGS}")
message("LLVM_EXE_LINKER_FLAGS=${LLVM_EXE_LINKER_FLAGS}")
message("LLVM_SHARED_LINKER_FLAGS=${LLVM_SHARED_LINKER_FLAGS}")
message("LLVM_COMPILE_DEFS=${LLVM_COMPILE_DEFS}")
message("LLVM_COMPILE_OPTS=${LLVM_COMPILE_OPTS}")

set(CMAKE_CXX_FLAGS "${LLVM_CXX_FLAGS_PREEXISTING}")
set(CMAKE_C_FLAGS "${LLVM_C_FLAGS_PREEXISTING}")
set(CMAKE_ASM_FLAGS "${LLVM_ASM_FLAGS_PREEXISTING}")
set(CMAKE_EXE_LINKER_FLAGS "${LLVM_EXE_LINKER_FLAGS_PREEXISTING}")
set(CMAKE_MODULE_LINKER_FLAGS "${LLVM_MODULE_LINKER_FLAGS_PREEXISTING}")
set(CMAKE_SHARED_LINKER_FLAGS "${LLVM_SHARED_LINKER_FLAGS_PREEXISTING}")

unset(LLVM_COMPILE_DEFS_PREEXISTING)
unset(LLVM_COMPILE_OPTS_PREEXISTING)
unset(LLVM_CXX_FLAGS_PREEXISTING)
unset(LLVM_C_FLAGS_PREEXISTING)
unset(LLVM_ASM_FLAGS_PREEXISTING)
unset(LLVM_EXE_LINKER_FLAGS_PREEXISTING)
unset(LLVM_MODULE_LINKER_FLAGS_PREEXISTING)
unset(LLVM_SHARED_LINKER_FLAGS_PREEXISTING)

function(SetupLLVMLibs)
  foreach(_tgt ${LLVM_AVAILABLE_LIBS})
    get_property(_libs TARGET ${_tgt}
      PROPERTY "IMPORTED_LINK_DEPENDENT_LIBRARIES_${LLVM_BUILD_TYPE}")
    foreach(_lib ${_libs})
      target_link_libraries(${_tgt} INTERFACE ${_lib})
      target_include_directories(${_lib} INTERFACE ${LLVM_INCLUDE_DIRS})
      target_link_directories(${_lib} INTERFACE ${LLVM_LIBRARY_DIR})
      target_link_options(${_lib} INTERFACE ${LLVM_SHARED_LINKER_FLAGS})
      target_compile_definitions(${_lib} INTERFACE ${LLVM_DEFINITIONS})
      # This may be all repeats
      target_compile_definitions(${_lib} INTERFACE ${LLVM_COMPILE_DEFS})
      target_compile_options(${_lib} INTERFACE ${LLVM_COMPILE_OPTS})
      # Most of llvm is in C++
      target_compile_options(${_lib} INTERFACE ${LLVM_CXX_FLAGS})
    endforeach()
  endforeach()
endfunction()

SetupLLVMLibs()

function(target_add_llvm_dep tgt)
  cmake_parse_arguments(ARG
    "LIBRARY;EXECUTABLE;SET_RPATH"
    "LANGUAGE"
    ""
    ${ARGN})
  if (ARG_LIBRARY AND ARG_EXECUTABLE)
    message(FATAL_ERROR "Cannot declare target both library and executable")
  endif()
  if (NOT (ARG_LIBRARY OR ARG_EXECUTABLE))
    set(ARG_EXECUTABLE TRUE)
  endif()
  if (${ARG_LIBRARY} AND ${ARG_EXECUTABLE})
    message(FATAL_ERROR "Cannot declare target both library and executable")
  endif()
  if(NOT (${ARG_LIBRARY} OR ${ARG_EXECUTABLE}))
    set(ARG_EXECUTABLE TRUE)
  endif()
  if(${ARG_LIBRARY})
    list(APPEND llvm_dep_args LIBRARY)
  else()
    list(APPEND llvm_dep_args EXECUTABLE)
  endif()
  if(NOT ${ARG_LANGUAGE})
    set(ARG_LANGUAGE "CXX")
  endif()
  set(unknown_libs "")
  foreach(_lib ${ARG_UNPARSED_ARGUMENTS})
    list(FIND LLVM_AVAILABLE_LIBS "${_lib}" _lib_found)
    if(${_lib_found})
      list(APPEND _llvm_libs "${_lib}")
    else()
      list(APPEND unknown_libs "${_lib}")
    endif()
  endforeach()
  if(${unknown_libs})
    message(FATAL_ERROR "Unrecognized llvm targets ${unknown_libs}")
  endif()
  if("${ARG_LANGUAGE}" STREQUAL "CXX")
    target_compile_options(${tgt} PUBLIC "${LLVM_CXX_FLAGS}")
  elseif("${ARG_LANGUAGE}" STREQUAL "C")
    target_compile_options(${tgt} PUBLIC "${LLVM_C_FLAGS}")
  elseif("${ARG_LANGUAGE}" STREQUAL "ASM")
    target_compile_options(${tgt} PUBLIC "${LLVM_ASM_FLAGS}")
  endif()
  target_link_libraries(${tgt} PUBLIC ${_llvm_libs})
  target_include_directories(${tgt} PUBLIC ${LLVM_INCLUDE_DIRS})
  target_link_directories(${tgt} PUBLIC ${LLVM_LIBRARY_DIR})
  target_link_options(${tgt} PUBLIC ${LLVM_SHARED_LINKER_FLAGS})
  if(${ARG_SET_RPATH})
    llvm_setup_rpath(${tgt})
  endif()
  # Handle RTTI and exception-handling
  llvm_update_compile_flags(${tgt})
endfunction()

cmake_policy(POP)
